<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Flygar&#39;s Blog</title>
    <link>https://flygar.github.io/posts/</link>
    <description>Recent content in Posts on Flygar&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 25 Aug 2019 22:17:47 +0800</lastBuildDate>
    
	<atom:link href="https://flygar.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>My first Post temple</title>
      <link>https://flygar.github.io/posts/temple/</link>
      <pubDate>Sun, 25 Aug 2019 22:17:47 +0800</pubDate>
      
      <guid>https://flygar.github.io/posts/temple/</guid>
      <description>&lt;p&gt;自定义摘要&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang Magic</title>
      <link>https://flygar.github.io/posts/golang-magic/</link>
      <pubDate>Sun, 12 Aug 2018 20:14:03 +0000</pubDate>
      
      <guid>https://flygar.github.io/posts/golang-magic/</guid>
      <description>诡异的操作
a:=&amp;quot;hello&amp;quot; b:=123 //%后的副词[n]告诉Print函数使用第n个操作数 fmt.Printf(&amp;quot;%[2]d, %[1]s, %[1]T, %[2]T, %[1]q&amp;quot;,a,b)  </description>
    </item>
    
    <item>
      <title>Golang Bit Operation</title>
      <link>https://flygar.github.io/posts/golang-bit-operation/</link>
      <pubDate>Sun, 12 Aug 2018 18:28:46 +0000</pubDate>
      
      <guid>https://flygar.github.io/posts/golang-bit-operation/</guid>
      <description>Bool类型的零值“false” &amp;ldquo;&amp;amp;&amp;amp;&amp;rdquo;:有假则假;&amp;ldquo;||&amp;rdquo;:有真则真; 当运算符左边表达式的值已经能够决定整个表达式的值的时候(&amp;amp;&amp;amp; 左边的值为 false，|| 左边的值为 true)，运算符右边的表达式将不会被执行。利用这个性 质，如果有多个条件判断，应当将计算过程较为复杂的表达式放在运算符的右侧以减少不必要的运算。
 bit位运算 ax := 1 &amp;lt;&amp;lt; 1 // 00000010 bx := 1 &amp;lt;&amp;lt; 5 // 00100000 // 按位或 | : 有1则1 cx := ax | bx // 00100010 fmt.Printf(&amp;quot;ax(%d)的二进制: %08b\nbx(%d)的二进制: %08b\ncx(%d)的二进制: %08b\n&amp;quot;, ax, ax, bx, bx, cx, cx) ay := 4 &amp;gt;&amp;gt; 1 // 00000010 by := 7 &amp;gt;&amp;gt; 1 // 00000011 // 按位与 &amp;amp; : 有0则0 cy := ay &amp;amp; by // 00000010 fmt.</description>
    </item>
    
    <item>
      <title>Golang Slice</title>
      <link>https://flygar.github.io/posts/golang-slice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://flygar.github.io/posts/golang-slice/</guid>
      <description>Golang入门计划 //slice「easySlice1」的slice. [1:3]左闭右开. cap 为[1:]. len 为2. 引用传递 easySlice1 := [][]int{{1, 2}, {3, 4}, {5, 6, 7, 8}, {9, 10}, {99, 100}}[1:3] fmt.Println(easySlice1) fmt.Println(cap(easySlice1)) //change easySlice1 easySlice1[0][1] = int(44) easySlice1[1] = []int{1, 2, 3, 4} fmt.Println(easySlice1) //将数组转为切片 //报错：slice of unaddressable value; 需要先赋值给一个变量 easyArray = [5][5]int{{1, 2}, {3, 4, 5, 6, 7}}[:] //正确操作 easyArray := [5][5]int{{1, 2}, {3, 4, 5, 6, 7}} easySlice2 := easyArray[:] fmt.Println(easySlice2) //slice and map mapResults := make(map[int]string) // var arrResults [][]string arrResults := make([][]string, 0) const LOOPCOUNT = 3 for i := 0; i &amp;lt; LOOPCOUNT; i++ { valueStr := fmt.</description>
    </item>
    
    <item>
      <title>Golang rune and byte</title>
      <link>https://flygar.github.io/posts/golang-rune/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://flygar.github.io/posts/golang-rune/</guid>
      <description>The difference between golang&amp;rsquo;s string and byte and rune
  在Go当中 string底层是用byte数组存的，并且是不可以改变的。
 源码中的定义 // string is the set of all strings of 8-bit bytes, conventionally but not // necessarily representing UTF-8-encoded text. A string may be empty, but // not nil. Values of string type are immutable. type string string // byte is an alias for uint8 and is equivalent to uint8 in all ways. It is // used, by convention, to distinguish byte values from 8-bit unsigned // integer values.</description>
    </item>
    
    <item>
      <title>Map and Reduce</title>
      <link>https://flygar.github.io/posts/map-and-reduce/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://flygar.github.io/posts/map-and-reduce/</guid>
      <description>Python records Map map的用法：
map(function, sequence)   对 sequence 中的 item 依次执行 function(item)，并将结果组成一个 List 返回
 &amp;gt;&amp;gt;&amp;gt; list(map(lambda x:x**2,[1,3,2,4])) [1, 9, 4, 16] &amp;gt;&amp;gt;&amp;gt; list(map(str,[1,3,2,4])) [&#39;1&#39;, &#39;3&#39;, &#39;2&#39;, &#39;4&#39;] &amp;gt;&amp;gt;&amp;gt; list(map(int,[&#39;1&#39;, &#39;3&#39;, &#39;2&#39;, &#39;4&#39;])) [1, 3, 2, 4]  def double(x): return 2 * x def triple(x): return 3 * x def square(x): return x * x # 列表元素是函数对象 funcs = [double, triple, square] # 相当于 [double(4), triple(4), square(4)] value = list(map(lambda f: f(4), funcs)) print(value) # output [8, 12, 16]  Reduce reduce的用法：</description>
    </item>
    
  </channel>
</rss>